@page "/"
@inject HttpClient Http
@using Scregex.Core.Game
@using System.Text.RegularExpressions

<PageTitle>Index</PageTitle>

<style>
    board {
        display: grid;
        grid-template-columns: repeat(15, auto);
        grid-template-rows: repeat(15, auto);
        justify-content: center;
        align-items: center;
        justify-items: center;
        grid-gap: 0.1em;
        font-size: 20px;
    }

    cell {
        display:  flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background-color: #ffefc7;
        border: 0.1em solid black;
        width: 2em;
        height: 2em;
        padding: 0.5em;
        text-align: center;
    }

    cell.selected {
        border: 0.2em solid;
    }

    cell.center.unplayed {
        background-image: url("iconmonstr-star-3.svg");
        background-size: contain;
    }

    wordlist {
        overflow: hidden;
        height: 40em;
    }

    wordlist ul {
        list-style-type: none
    }

    wordlist word {
        background-color: #f3f3f3;
        border: 0.1em black solid;
        padding: 0.5em;
        margin: 0.25em 0;
        cursor: pointer;
        display: block;
        text-align: center;
    }
</style>

<div style="display: flex; flex-wrap: wrap">
    <board>
        @for (int cellId = 0; cellId < 225; cellId++)
        {
            var position = Position.FromFlatCoordinate(cellId);
            var value = _values[cellId];
            <cell class="@CalculateCssClassFor(position)" data-cellid="@(cellId)" @onclick="@(() => SelectCell(position))">@value</cell>
        }
    </board>
    <wordlist>
        <ul>
            @foreach (var word in DisplayedWords())
            {
                <li><word @onclick="() => SelectWord(word)">@word</word></li>
            }
        </ul>
    </wordlist>
</div>
<div style="margin: 1em;">
    <div>
        <input type="text"
               placeholder="Regular expression..."
               @bind-value="_newRegex"
               @bind-value:event="oninput"
               @bind-value:after="OnNewRegex"
               />
    </div>
    <div>
        <input type="text" placeholder="Select a word" disabled @bind="_newWord" @bind:after="OnNewInput"/>
        <select @bind="_direction" @bind:after="OnNewInput">
            <option value="@Direction.Horizontal" selected="selected">Horizontal</option>
            <option value="@Direction.Vertical">Vertical</option>
        </select>
        <button style="background-color: @PlayButtonColor();" onclick="@PlayAWord">→</button>
    </div>
</div>


@code {
    private GameEngine _game = null!;
    private char[] _values = new char[225];

    private string? _newWord;
    private string? _newRegex;
    private Regex? _regex;
    private Direction? _direction = Direction.Horizontal;

    private PlayResult? _nextResult;
    private Position? _lastSelectedCell = Position.Center;
    private string[] _availableWords = Array.Empty<string>();

    private IEnumerable<string> DisplayedWords()
    {
        if (_regex == null) return Array.Empty<string>();

        return _availableWords.Where(it => _regex.IsMatch(it)).Take(10);
    }

    private void OnNewRegex()
    {
        if (string.IsNullOrWhiteSpace(_newRegex)) return;

        try
        {
            _regex = new Regex(_newRegex);
        }
        catch
        {
            _regex = null;
        }
    }

    private string PlayButtonColor()
    {
        if (_nextResult == PlayResult.Valid)
        {
            return "lightgreen";
        }

        return "lightcoral";
    }

    protected override async Task OnInitializedAsync()
    {
        var wordList = await Http.GetStringAsync("ODS8_100k.txt");
        _game = new GameEngine(wordList
            .ToUpperInvariant()
            .Split('\n')
            .Select(it => it.Trim())
            .Where(it => !string.IsNullOrEmpty(it))
            );

        SyncGameState();
    }

    private void SelectCell(Position position)
    {
        _lastSelectedCell = position;
        PrecomputeNextResult();
    }

    private void PlayAWord()
    {
        if (_newWord == null || _lastSelectedCell == null) return;

        _game.PlayWord(new PlayedWord(_newWord, _lastSelectedCell, _direction!.Value));
        SyncGameState();
        StateHasChanged();
    }

    private void SyncGameState()
    {
        _values = _game.CurrentBoardSnapshot().CurrentValues();
        _availableWords = _game.GetCurrentlyAvailableWords().ToArray();
        PrecomputeNextResult();
        StateHasChanged();
    }

    private void OnNewInput()
    {
        PrecomputeNextResult();
        StateHasChanged();
    }

    private void SelectWord(string word)
    {
        _newWord = word;
        OnNewInput();
    }

    private void PrecomputeNextResult()
    {
        if (_newWord != null && _lastSelectedCell != null && _direction != null)
        {
            _nextResult = _game.TryPlayWord(new PlayedWord(_newWord, _lastSelectedCell, _direction!.Value));
        }
        else
        {
            _nextResult = null;
        }
    }

    private string CalculateCssClassFor(Position position)
    {
        List<string> classes = new();
        if (position == _lastSelectedCell) classes.Add("selected");
        if (position == Position.Center) classes.Add("center");
        if (_values[position.FlatCoordinate()] == ' ')
        {
            classes.Add("unplayed");
        }
        else
        {
            classes.Add("played");
        }

        return string.Join(" ", classes);
    }

}